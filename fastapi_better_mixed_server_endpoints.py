"""FastAPI server that supports both JSON and Protobuf endpoints using autogenerated protobuf endpoints."""

from collections.abc import Awaitable, Callable
from typing import TYPE_CHECKING, get_type_hints

import uvicorn
from fastapi import FastAPI, HTTPException, Request
from fastapi.responses import Response
from fastapi.routing import APIRoute

from betterproto_pb.school import Classroom, ClassStats

if TYPE_CHECKING:
    import betterproto

app = FastAPI()


def generate_protobuf_endpoint(route: APIRoute) -> Callable[[Request], Awaitable[Response]]:
    """Generate a protobuf endpoint callable for a given route."""

    async def protobuf_endpoint(request: Request) -> Response:
        body = await request.body()
        type_hints = get_type_hints(route.endpoint)
        input_protobuf_class: betterproto.Message | None = next(
            (hint for hint in type_hints.values() if hasattr(hint, "FromString")),
            None,
        )
        if not input_protobuf_class:
            raise HTTPException(status_code=400, detail="Protobuf message type not found in endpoint signature")
        input_proto_object = input_protobuf_class.FromString(body)
        response_proto_object: betterproto.Message = await route.endpoint(input_proto_object)
        return Response(response_proto_object.SerializeToString(), media_type="application/x-protobuf")

    return protobuf_endpoint


def add_protobuf_endpoints(app: FastAPI) -> None:
    """Add all protobuf endpoints to the app."""
    new_routes = []
    for route in app.routes:
        if isinstance(route, APIRoute):
            protobuf_route = APIRoute(
                path=f"{route.path}_protobuf",
                endpoint=generate_protobuf_endpoint(route),
                methods=route.methods,
                name=f"{route.name}_protobuf",
                response_class=Response,
                status_code=route.status_code,
                tags=route.tags,
                dependencies=route.dependencies,
                summary=route.summary,
                description=route.description,
                response_description=route.response_description,
                responses=route.responses,
                deprecated=route.deprecated,
                operation_id=route.operation_id,
                include_in_schema=route.include_in_schema,
                response_model_include=route.response_model_include,
                response_model_exclude=route.response_model_exclude,
                response_model_exclude_none=route.response_model_exclude_none,
                response_model_exclude_unset=route.response_model_exclude_unset,
                response_model_exclude_defaults=route.response_model_exclude_defaults,
                response_model_by_alias=route.response_model_by_alias,
            )
            new_routes.append(protobuf_route)
    app.routes.extend(new_routes)


@app.post("/classroom")
async def summarize_classroom(classroom: Classroom) -> ClassStats:
    """Summarize the classroom."""
    return ClassStats(
        numstudents=len(classroom.students),
        grade=sum(student.avg_grade for student in classroom.students) / len(classroom.students),
    )


add_protobuf_endpoints(app)


@app.middleware("http")
async def redirect_protobuf(request: Request, call_next: Callable[[Request], Awaitable[Response]]) -> Response:
    """Redirect protobuf requests to the protobuf endpoint."""
    if request.headers.get("Content-Type") == "application/x-protobuf":
        request.scope["path"] = f"{request.scope['path']}_protobuf"
    return await call_next(request)


if __name__ == "__main__":
    uvicorn.run(app, host="127.0.0.1", port=8000)
