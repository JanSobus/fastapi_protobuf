# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: grpc_service.proto, messages.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from datetime import datetime
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class Student(betterproto.Message):
    name: str = betterproto.string_field(1)
    avg_grade: float = betterproto.float_field(2)
    dob: datetime = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class Classroom(betterproto.Message):
    profile: str = betterproto.string_field(1)
    students: List["Student"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ClassStats(betterproto.Message):
    numstudents: int = betterproto.int32_field(1)
    grade: float = betterproto.float_field(2)


class ClassroomSummaryStub(betterproto.ServiceStub):
    async def summarize_classroom(
        self,
        classroom: "Classroom",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ClassStats":
        return await self._unary_unary(
            "/school.ClassroomSummary/SummarizeClassroom",
            classroom,
            ClassStats,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class ClassroomSummaryBase(ServiceBase):

    async def summarize_classroom(self, classroom: "Classroom") -> "ClassStats":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_summarize_classroom(
        self, stream: "grpclib.server.Stream[Classroom, ClassStats]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.summarize_classroom(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/school.ClassroomSummary/SummarizeClassroom": grpclib.const.Handler(
                self.__rpc_summarize_classroom,
                grpclib.const.Cardinality.UNARY_UNARY,
                Classroom,
                ClassStats,
            ),
        }
